CREATE TABLE public.account (
  account_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  firstname VARCHAR NOT NULL,
  lastname VARCHAR NOT NULL,
  email VARCHAR UNIQUE NOT NULL,
  password VARCHAR NOT NULL,
  account_type VARCHAR DEFAULT 'Client'
);


-- Insert new record for Tony Stark
INSERT INTO public.account (
    firstname, 
    lastname, 
    email, 
    password
)
VALUES (
    'Tony', 
    'Stark', 
    'tony@starkent.com', 
    'Iam1ronM@n');

CREATE TABLE public.classification (
  classification_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  classification_name VARCHAR NOT NULL
);

CREATE TABLE public.inventory (
  inv_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  inv_make VARCHAR NOT NULL,
  inv_model VARCHAR NOT NULL,
  inv_year CHAR(4) NOT NULL,
  inv_description TEXT NOT NULL,
  inv_image VARCHAR NOT NULL,
  inv_thumbnail VARCHAR NOT NULL,
  inv_price NUMERIC(9,0) NOT NULL,
  inv_miles INT NOT NULL,
  inv_color VARCHAR NOT NULL,
  classification_id INT NOT NULL,
  CONSTRAINT fk_classification FOREIGN KEY (classification_id)
    REFERENCES public.classification (classification_id)
    ON UPDATE CASCADE
    ON DELETE NO ACTION
);


--Update Tony account type to admin
UPDATE public.account
SET account_type = 'Admin'
WHERE account_id = 1;

--Delete Tony Stark record
DELETE FROM public.account
WHERE account_id = 1;

-- Update GM Hummer description
UPDATE public.inventory
SET inv_description = REPLACE(inv_description, 'small interiors', 'a huge interior')
WHERE inv_make = 'GM' AND inv_model = 'Hummer';

--Inner join for Sport category vehicles
SELECT 
    i.inv_make, 
    i.inv_model, 
    c.classification_name
FROM 
    public.inventory i
INNER JOIN 
    public.classification c ON i.classification_id = c.classification_id
WHERE 
    c.classification_name = 'Sport';

-- Update image paths to include '/vehicles'
UPDATE public.inventory
SET
    inv_image = REPLACE(inv_image, '/images', '/images/vehicles'),
    inv_thumbnail = REPLACE(inv_thumbnail, '/images', '/images/vehicles');


